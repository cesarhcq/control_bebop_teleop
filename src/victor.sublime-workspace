{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"a",
				"append"
			],
			[
				"image_r",
				"image_resize_pub"
			],
			[
				"yaw_",
				"yaw_error"
			],
			[
				"last_error_",
				"last_error_yaw"
			],
			[
				"z_",
				"z_position"
			],
			[
				"z",
				"z_position"
			],
			[
				"ed",
				"edge_rcnn_pub"
			],
			[
				"out",
				"out1"
			],
			[
				"image_",
				"image_raw"
			],
			[
				"pos",
				"position"
			],
			[
				"sta",
				"status_experiencia"
			],
			[
				"status",
				"status_estado_civil"
			],
			[
				"est",
				"estado_civil"
			],
			[
				"SH",
				"shape"
			],
			[
				"lan",
				"landing"
			],
			[
				"rc",
				"image_rcnn"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/opt/parrot-sphinx/usr/share/sphinx/drones/bebop2.drone",
			"settings":
			{
				"buffer_size": 607,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/acta/bebop_ws/src/bebop_autonomy/bebop_driver/launch/bebop_node.launch",
			"settings":
			{
				"buffer_size": 925,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/acta/navigation_ws/src/line_nav/scripts/hough_image_nav.py",
			"settings":
			{
				"buffer_size": 7243,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/acta/navigation_ws/src/line_nav/scripts/callRN_direction.py",
			"settings":
			{
				"buffer_size": 20242,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/acta/navigation_ws/src/line_nav/scripts/img_RCNN_compressed.py",
			"settings":
			{
				"buffer_size": 9374,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/usr/bin/env python\n## Author: Alan Tavares\n## Date: August, 12, 2019\n# Purpose: Ros node to detect objects using tensorflow\nimport os\nimport sys\nimport cv2\nimport numpy as np\n\n# ROS related imports\nimport rospy\nfrom geometry_msgs.msg import Twist, Vector3\nfrom vision_msgs.msg import Detection2D, Detection2DArray, ObjectHypothesisWithPose\n\n# Estimator\nclass Estimator(object):\n\n    def __init__(self):\n        super(Estimator, self).__init__()\n        rospy.init_node('estimator_node', log_level=rospy.DEBUG)\n\n        self.VERBOSE = True\n        self.msg_nav = Vector3()\n        \n        #############################################################################\n        # Publishers\n        self.rcnn_pub = rospy.Publisher('rcnn/nav_position', Vector3, queue_size=1)\n\n        # Subscribers\n        self.object_sub = rospy.Subscriber(\"rcnn/objects\", Detection2DArray, self.objCallback, queue_size=1)\n\n        #############################################################################\n        \n        current_time = rospy.Time.now()\n        last_time = rospy.Time.now()\n        vy = 0\n\n        r = rospy.Rate(100.0)\n        while not rospy.is_shutdown():\n            current_time = rospy.Time.now()\n\n            # compute odometry in a typical way given the velocities of the robot\n            dt = (current_time - last_time).to_sec()\n            vy = vy + \n\n            rospy.logdebug(\"Altura Filtrada (out): %f\", self.msg_nav.pose.pose.position.z)\n            rospy.logdebug(\"--------------------------------\")\n\n            self.rcnn_pub.publish(self.msg_nav)\n\n            r.sleep()\n\n        try: \n            rospy.spin()\n        except rospy.ROSInterruptException:\n            print(\"Shutting down\")\n\n    def objCallback(self, data):\n        # recive data\n        objArray = Detection2DArray()\n        objArray = data\n        obj = objArray.detections\n\n        list_positivey = []\n        list_negativey = []\n        list_z = []\n\n        # Object search\n        if len(obj) >= 1:\n            for i in range(len(obj)):\n                pointy = objArray.detections[i].results[0].pose.pose.position.y\n                list_z.append(objArray.detections[i].results[0].pose.pose.position.z)\n                #rospy.logdebug(\"position.y [%d]: %f\", i, objArray.detections[i].results[0].pose.pose.position.y)\n                #rospy.logdebug(\"position.z [%d]: %f\", i, objArray.detections[i].results[0].pose.pose.position.z)\n                # list y\n                if pointy > 0:\n                    list_positivey.append(pointy)\n                else:\n                    list_negativey.append(pointy)\n\n            medz_ant = sum(list_z)/len(list_z)\n            self.msg_nav.z = medz_ant\n\n            if len(list_positivey) >= 1:\n                medy_ant_p = sum(list_positivey)/len(list_positivey)\n                rospy.logdebug(\"position.pos.y: %f\", medy_ant_p)\n                self.msg_nav.x = medy_ant_p\n            if len(list_negativey) >= 1:\n                medy_ant_n = sum(list_negativey)/len(list_negativey)\n                rospy.logdebug(\"position.neg.y: %f\", medy_ant_n)\n                self.msg_nav.y = medy_ant_n\n        rospy.logdebug(\"--------------------------------\")\n\n        #for\n        # rospy.logdebug(\"Tamanho da lista(out): %f\", len(list_z))\n        # rospy.logdebug(\"Somatoria lista(out): %f\", sum(list_z))\n        # rospy.logdebug(\"Altura Filtrada (out): %f\", self.msg_nav.z)\n        # rospy.logdebug(\"--------------------------------\")\n\n\nif __name__=='__main__':\n    estimator = Estimator()",
			"file": "/home/acta/navigation_ws/src/line_nav/scripts/pose_RCNN.py",
			"file_size": 3534,
			"file_write_time": 132241362323714966,
			"settings":
			{
				"buffer_size": 3520,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/acta/navigation_ws/src/line_nav/scripts/odometriaRCNN.py",
		"/home/acta/navigation_ws/src/line_nav/scripts/img_RCNN.py",
		"/home/acta/navigation_ws/src/line_nav/scripts/sub_compressed.py",
		"/home/acta/navigation_ws/src/line_nav/README.md",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/fusion_filter_kalman.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/detect_rcnn.py",
		"/home/acta/catkin_ws/src/aruco_ros/aruco_ros/src/simple_double.cpp",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/launch/drone_cam_detector.launch",
		"/home/acta/bebop_ws/src/control_bebop_teleop/src/hough_image_nav.py",
		"/home/acta/bebop_ws/src/control_bebop_teleop/src/autonomous_navigation.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/odometriaRCNN.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/img_RCNN.py",
		"/home/acta/bebop_ws/src/control_bebop_teleop/src/callRN_direction.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/callRN.py",
		"/home/acta/bebop_ws/src/control_bebop_teleop/src/landing_pub.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/launch/usb_cam_detector.launch",
		"/home/acta/navigation_ws/src/line_nav/package.xml",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/detect_ros.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/detect_aruco.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/hough_image.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/navigation.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/positionRCNN.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/OdometriaRCNN.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/launch/drone_detector.launch",
		"/home/acta/bebop_ws/src/control_bebop_teleop/src/image_sub.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/launch/rn_victor.launch",
		"/opt/ros/kinetic/share/rospy_tutorials/006_parameters/param_talker.launch",
		"/opt/ros/kinetic/share/rospy_tutorials/006_parameters/param_talker.py",
		"/opt/ros/kinetic/share/rospy_tutorials/006_parameters/param_talker.",
		"/home/acta/catkin_ws/src/aruco_ros/aruco_ros/launch/aruco_double_bebop.launch",
		"/home/acta/catkin_ws/src/aruco_ros/aruco_ros/launch/webcam2.launch",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/detect_rcnn_compressed.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/sub_compressed.py",
		"/home/acta/bebop_ws/src/rcnn_landmark/deteccion/object_detection/object_detection_runner.py",
		"/home/acta/bebop_ws/src/aruco_ros/aruco_ros/launch/aruco_double_bebop.launch",
		"/home/acta/bebop_ws/src/aruco_ros/aruco_ros/src/simple_double.cpp",
		"/home/acta/bebop_ws/src/aruco_ros/aruco_ros/launch/single.launch",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/filter_kalman_test.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/launch/usb_cam_detector2.launch",
		"/home/acta/dataset_tese/export.launch",
		"/home/acta/bebop_ws/src/rcnn_landmark/deteccion/csv_a_tf.py",
		"/home/acta/bebop_ws/src/rcnn_landmark/deteccion/setup.py",
		"/home/acta/bebop_ws/src/rcnn_landmark/deteccion/xml_a_csv.py",
		"/home/acta/bebop_ws/src/rcnn_landmark/change-name.py",
		"/home/acta/bebop_ws/src/control_bebop_teleop/src/callRCNN-test-drone.py",
		"/home/acta/bebop_ws/src/control_bebop_teleop/src/callRN.py",
		"/home/acta/bebop_ws/src/control_bebop_teleop/src/teleop_keyboard.py",
		"/home/acta/bebop_ws/src/bebop_autonomy/bebop_driver/data/bebop1_camera_calib.yaml",
		"/home/acta/bebop_ws/src/bebop_autonomy/bebop_driver/data/bebop2_camera_calib.yaml",
		"/home/acta/bebop_ws/src/bebop_autonomy/bebop_driver/src/bebop_driver_nodelet.cpp",
		"/home/acta/bebop_ws/src/bebop_autonomy/bebop_driver/src/bebop_driver_node.cpp",
		"/home/acta/.ros/camera_info/head_camera.yaml",
		"/home/acta/bebop_ws/src/bebop_autonomy/bebop_driver/launch/bebop_nodelet.launch",
		"/home/acta/Dropbox/Python Scripts/calibration-python/cameracalib.py",
		"/home/acta/bebop_ws/src/bebop_autonomy/bebop_driver/include/bebop_driver/bebop.h",
		"/home/acta/bebop_ws/src/bebop_autonomy/bebop_driver/include/bebop_driver/bebop_driver_nodelet.h",
		"/home/acta/bebop_ws/src/bebop_autonomy/bebop_driver/config/defaults.yaml",
		"/home/acta/Desktop/teste.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/dett.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/callRCNN.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/launch/filter_hybrid.launch",
		"/home/acta/bebop_ws/src/control_bebop_teleop/new.world",
		"/home/acta/.gazebo/models/powerlines/model.sdf",
		"/home/acta/.gazebo/models/powerlines/model.config",
		"/home/acta/guntherBot_ws/src/GuntherBot/README.md",
		"/home/acta/guntherBot_ws/src/GuntherBot/robot_description/launch/teleop-guntherbot.launch",
		"/home/acta/guntherBot_ws/src/GuntherBot/robot_gazebo/launch/second.launch",
		"/home/acta/guntherBot_ws/src/GuntherBot/robot_description/launch/robot_description.launch",
		"/home/acta/guntherBot_ws/src/GuntherBot/robot_gazebo/launch/first.launch",
		"/home/acta/abrobot_ws/src/abrobot/abrobot_gazebo/launch/second.launch",
		"/home/acta/guntherBot_ws/src/GuntherBot/robot_description/urdf/materials.xacro",
		"/home/acta/guntherBot_ws/src/GuntherBot/robot_description/urdf/arlobot.urdf.xacro",
		"/home/acta/guntherBot_ws/src/GuntherBot/robot_description/urdf/robot.xacro",
		"/home/acta/guntherBot_ws/src/GuntherBot/robot_description/urdf/robot.gazebo",
		"/home/acta/bebop_ws/src/control_bebop_teleop/src/dnn_app_utils_v2.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/detect_ros_ssd_v1.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/launch/usb_cam_filter.launch",
		"/home/acta/catkin_ws/src/vision_msgs/package.xml",
		"/home/acta/catkin_ws/src/vision_msgs/test/main.cpp",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/detect_hybrid.py",
		"/home/acta/bebop_ws/src/rcnn_landmark/deteccion/output/Object_detection_video.py",
		"/home/acta/bebop_ws/src/rcnn_landmark/deteccion/output/Object_detection_webcam.py",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/scripts/detect_ros_ssdlite_v1.py",
		"/home/acta/bebop_ws/src/bebop_autonomy/bebop_driver/launch/bebop_node.launch",
		"/home/acta/.bashrc",
		"/home/acta/catkin_ws/src/tensorflow_object_detector/launch/object_detect.launch",
		"/home/acta/bebop_ws/src/rcnn_landmark/deteccion/model/ssd_mobilenet_v1.config",
		"/home/acta/datasetpet/main.py",
		"/home/acta/bebop_ws/src/rcnn_landmark/README.md",
		"/home/acta/petTest/test.py",
		"/home/acta/guntherBot_ws/src/GuntherBot/base_controller/src/base_controller.cpp",
		"/home/acta/.gazebo/models/aruco_2/model.sdf",
		"/home/acta/.gazebo/models/aruco_2/model.config",
		"/home/acta/.gazebo/models/aruco_1/model.sdf",
		"/home/acta/.gazebo/models/aruco_1/model.config",
		"/home/acta/.gazebo/models/aruco_test/model.sdf",
		"/home/acta/bebop_ws/src/rcnn_landmark/deteccion/object_detection/train.py",
		"/home/acta/Desktop/deteccion - ssd_mobilenet_v2/model/ssd_mobilenet_v2.config",
		"/home/acta/bebop_ws/src/rcnn_landmark/deteccion/model/ssd_mobilenet_v2.config",
		"/home/acta/bebop_ws/src/rcnn_landmark/deteccion - ssd_mobilenet_v2/model/ssd_mobilenet_v2.config",
		"/home/acta/bebop_ws/src/rcnn_landmark/deteccion - ssd_mobilenet_v2/model/ssd_mobilenet_v1.config",
		"/home/acta/change-name.py",
		"/home/acta/Desktop/img/frame1.xml",
		"/home/acta/Desktop/test/change-name.py",
		"/home/acta/bebop_ws/src/rcnn_colab/README.md",
		"/home/acta/new-world.world",
		"/home/acta/.gazebo/models/aruco_test/model.config",
		"/home/acta/pibic2019/ex01.py",
		"/opt/parrot-sphinx/usr/share/sphinx/drones/bebop2.drone",
		"/home/acta/model_editor_models/aruco_test/model.sdf",
		"/home/acta/model_editor_models/aruco/model.sdf",
		"/home/acta/model_editor_models/aruco/materials/scripts/arucobox.material",
		"/home/acta/model_editor_models/aruco_test/model.config",
		"/home/acta/model_editor_models/aruco/model.config",
		"/home/acta/.gazebo/models/asphalt_plane/model.sdf",
		"/home/acta/model_editor_models/aruco2/model.sdf",
		"/home/acta/.gazebo/models/big_box/meshes/big_box.dae",
		"/home/acta/.gazebo/models/asphalt_plane/model.config",
		"/home/acta/model_editor_models/aruco2/model.config",
		"/home/acta/.gazebo/models/warehouse_robot/model.sdf",
		"/home/acta/.gazebo/models/gunthet_robot/model.sdf",
		"/home/acta/.gazebo/models/gunthet_robot/model.config",
		"/home/acta/bebop_ws/src/control_bebop_teleop/world/aruco_iluminado.world",
		"/home/acta/Desktop/test-ultrassound.cpp",
		"/home/acta/bebop_ws/src/rcnn_colab/deteccion_objetos_atual/model/pipeline.config",
		"/home/acta/bebop_ws/src/rcnn_colab/deteccion_objetos_atual/model/pipeline-v1.config",
		"/home/acta/bebop_ws/src/rcnn_colab/deteccion_objetos_atual/model/ssd_mobilenet_v1.config",
		"/home/acta/bebop_ws/src/rcnn_colab/deteccion_objetos_atual/xml_a_csv.py"
	],
	"find":
	{
		"height": 49.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"sess",
			"loginfo",
			"list_hough",
			"loginfo",
			"list_rotation",
			"list_moviment",
			"moviment",
			"tf",
			"{\n",
			"loginfo",
			"MINIMUM_CONFIDENCE",
			"MAX_NUMBER_OF_BOXES",
			"DISTANCE_FOCAL",
			"DIAMETER_LANDMARCK_M",
			"loginfo",
			"tf",
			"med_h",
			"sum_h",
			"list_z",
			"list_h",
			"distanceLandmarck",
			"marker_id1",
			"cv_image",
			"image",
			"tf",
			"Pose",
			"pub",
			"navigation",
			"OpenCV",
			"image_feature",
			"Updating H264",
			"Decode",
			"Decode:263",
			"camera",
			"param_camera_info_url",
			"camera",
			"self.u",
			"u",
			"navigation_pub",
			"out",
			"abrobot",
			"moviment1",
			"\nmoviment1",
			"moviment1 = False\nmoviment1",
			"    if out1 == 0:\n        rospy.loginfo(\"Reta\")\n    else:\n        rospy.loginfo(\"Curva\")\n        if out2 == 1:\n            rospy.loginfo(\"...Esquerda\")\n        else:\n            rospy.loginfo(\"...Direita\")\n    rospy.loginfo(\"-------------------------\")",
			"object_count",
			"self.F",
			"self.u",
			"font",
			"category_index",
			"object_count",
			"visualize_boxes_and_labels_on_image_array",
			"sess",
			"predict",
			"autoNavigation",
			"fine_tune_checkpoint_type",
			"use_depthwise",
			">\n",
			"asph",
			"bebop",
			"Twist",
			"vel_act1",
			"echoPin_2",
			"ECHOPIN_1",
			"diffEncoder_Left",
			"encoder_filter",
			"encoder0PinA_Right",
			"direction_m",
			"PWM_MOTOR_1",
			"pidOut",
			"motor",
			"CS_THRESHOLD",
			"pwm",
			"CW",
			"usMotor_Status",
			"publishVEL",
			"Point32",
			"MOTOR_LEFT",
			"updatePid",
			"CS_THRESHOLD",
			"CW",
			"getMotorData",
			"robo",
			"wheel",
			"abro",
			"odom_broadcaster",
			"baselink_broadcaster",
			"encoder_Left",
			"encoder_Right",
			"ST",
			"PWM_1",
			"MOTOR_LEFT",
			"encoder_Left",
			"robot_description",
			"encoder_dt",
			"swap",
			"MAX_NUMBER_OF_BOXES",
			"initialize",
			"I2Cdev",
			"initialize",
			"Keyframe_aruco",
			"0",
			"callbackPoseAruco",
			"orientation_euler_pub",
			"hough_lines",
			"hough",
			"predict_curve",
			"linear_forward",
			"linear_activation_forward",
			"predict_curve",
			"parameters",
			"predict_curve",
			"image_cb",
			"object_predict",
			"MAX_NUMBER_OF_BOXES",
			"MINIMUM_CONFIDENCE",
			"use_depthwise",
			"batch_norm_trainable",
			"use_depthwise",
			"linear_forward",
			"linear_activation_forward",
			"L_model_forward",
			"predict_curve",
			"Casdasda",
			"linear_activation_forward",
			"L_model_forward",
			"linear_forward",
			"predict_curve"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/opt/parrot-sphinx/usr/share/sphinx/drones/bebop2.drone",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 607,
						"regions":
						{
						},
						"selection":
						[
							[
								2,
								2
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/acta/bebop_ws/src/bebop_autonomy/bebop_driver/launch/bebop_node.launch",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 925,
						"regions":
						{
						},
						"selection":
						[
							[
								21,
								21
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/acta/navigation_ws/src/line_nav/scripts/hough_image_nav.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7243,
						"regions":
						{
						},
						"selection":
						[
							[
								229,
								229
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 84.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/acta/navigation_ws/src/line_nav/scripts/callRN_direction.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20242,
						"regions":
						{
						},
						"selection":
						[
							[
								746,
								746
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/acta/navigation_ws/src/line_nav/scripts/img_RCNN_compressed.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9374,
						"regions":
						{
						},
						"selection":
						[
							[
								1576,
								1576
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 420.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/acta/navigation_ws/src/line_nav/scripts/pose_RCNN.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3520,
						"regions":
						{
						},
						"selection":
						[
							[
								1943,
								1943
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1428.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 37.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
